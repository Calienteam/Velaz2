@page "/AddCatalogItem"
@using Hackathon_VideoSharing_Platform.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using Hackathon.VideoSharing.Platform.Client
@inject SymmetricKeyIPFSDictionary dict
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h3>Add CatalogItem</h3>


<div class="container">
    <div class="row">
        @if (IsSending)
        {
            <p>Loading...</p> }
        else
        {
            <div class="col-md-5">
                <h4 class="mb-3">Title</h4>
                <EditForm Model="@videoMetaData" OnValidSubmit="@HandleAdding">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="title">Title</label>
                        <InputText id="title" class="form-control" placeholder="Большая Заруба 2" @bind-Value="videoMetaData.Title" />
                        <ValidationMessage For="@(() => videoMetaData.Title)" />
                    </div>

                    <div class="form-group">
                        <label for="title">Price</label>
                        <InputNumber id="cost" class="form-control" @bind-Value="videoMetaData.Price" />
                        <ValidationMessage For="@(() => videoMetaData.Price)" />
                    </div>
                    <div class="form-group">
                        <label for="photo">Upload video</label>
                        <InputFile OnChange="@OnFileSend" />
                    </div>

                    <button type="submit" class="btn btn-primary">Add Film</button>
                </EditForm>
            </div>
        }
    </div>
</div>



@code {
    private VideoMetaData videoMetaData = new VideoMetaData();
    private byte[] videoFile;
    private HubConnection hubConnection;

    private bool IsSending = false;

    private async Task HandleAdding()
    {
        IsSending = true;
        await SendMessage();
        IsSending = false;
    }

    private async Task OnFileSend(InputFileChangeEventArgs e)
    {
        var a = e.File;

        var buffer = new byte[e.File.Size];
        using (var readStream = e.File.OpenReadStream())
        {
            await readStream.ReadAsync(buffer);
        }

        videoFile = buffer;
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notificationhub"))
            .Build();

        await hubConnection.StartAsync();
    }

    async Task SendMessage()
    {
        var client = new IPFSConnection.IPFSConnection();

        var key = "HUI"; // stub

        var hash = await client.UploadDataAsync(videoFile);
        videoMetaData.IPFSHash = hash;

        Console.WriteLine("Got hash: {0}", hash);

        var videoMetadata = new VideoMetaData { AddressAuthor = "", Price = videoMetaData.Price, Title = videoMetaData.Title };

        dict.Add(videoMetadata, key);

        await hubConnection.SendAsync("BroadcastNewVideoInfo", videoMetadata);
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
