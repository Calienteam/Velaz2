@page "/AddCatalogItem"
@using Hackathon_VideoSharing_Platform.Shared
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@using BlazorInputFile

<h3>Add CatalogItem</h3>


<div class="container">
    <div class="row">
        @if (IsSending)
        {
            <p>Loading...</p> }
        else
        {
            <div class="col-md-5">
                <h4 class="mb-3">Title</h4>
                <EditForm Model="@videoMetaData" OnValidSubmit="@HandleAdding">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="title">Title</label>
                        <InputText id="title" class="form-control" placeholder="Большая Заруба 2" @bind-Value="videoMetaData.Title" />
                        <ValidationMessage For="@(() => videoMetaData.Title)" />
                    </div>

                    <div class="form-group">
                        <label for="title">Price</label>
                        <InputNumber id="cost" class="form-control" @bind-Value="videoMetaData.Price" />
                        <ValidationMessage For="@(() => videoMetaData.Price)" />
                    </div>
                    <div class="form-group">
                        <label for="photo">Upload photo</label>
                        @*<InputFile OnChange="@FileSendNotification" />*@
                    </div>

                    <button type="submit" @onclick="SendMessage" class="btn btn-primary">Add Film</button>
                </EditForm>
            </div>}
    </div>
</div>



@code {
    private VideoMetaData videoMetaData = new VideoMetaData();
    //private const string HtmlImageIdentifier = "image/";
    //private static bool ValidateFile(IFileListEntry file) => file.Type.StartsWith(HtmlImageIdentifier);
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();

    private bool IsSending = false;

    private async Task HandleAdding()
    {
        IsSending = true;
        //await client.PostJsonAsync("api/FeatureManagement/AddFeature", addFeatureModel);
        IsSending = false;
        //NavigationManager.NavigateTo("/FeatureManagement");
    }

    private async Task FileSendNotification(IFileListEntry[] files)
    {

    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notificationhub"))
            .Build();

        //hubConnection.On<VideoMetaData>("OnBroadcastNewVideoInfo", (vmd) =>
        //{
        //    var encodedMsg = $"{vmd.AddressAuthor}: {vmd.Title} - {vmd.Price}";
        //    messages.Add(encodedMsg);
        //    StateHasChanged();
        //});

        await hubConnection.StartAsync();
    }

    Task SendMessage() =>
        hubConnection.SendAsync("BroadcastNewVideoInfo", new VideoMetaData {  AddressAuthor = "", Price = videoMetaData.Price, Title = videoMetaData.Title});

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
