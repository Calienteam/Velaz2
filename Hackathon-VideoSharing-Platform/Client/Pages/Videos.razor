@page "/videos"

@using Hackathon_VideoSharing_Platform.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using CommonLib
@using Hackathon.VideoSharing.Platform.Client 

@inject NavigationManager NavigationManager
@inject MetamaskService metamaskService;
@inject MetamaskInterceptor metamaskInterceptor;
@inject SymmetricKeyIPFSDictionary dictionary;
@inject HttpClient http; 

<h3>Available Videos</h3>

@foreach (var video in videos)
{
    <div>Title: @video.Title</div>
    <div>Price: @video.Price</div>
    <button class="btn btn-primary" @onclick="@(() => buyVideo(video))">Buy</button>
}

@code {
    private bool MetamaskAvailable { get; set; }
    private bool EthereumEnabled { get; set; }
    private string SelectedAccount { get; set; }

    private Task PasswordPolling { get; set; }

    private HubConnection hubConnection;
    private List<VideoMetaData> videos = new List<VideoMetaData>
    {
    };

    private async Task EmitEvent(VideoPasswordEventDTO dto)
    {

    }

    private async Task PollPasswords()
    {
        while (true)
        {
            await Task.Delay(100);

            var nethContract = await dictionary.GetContract(metamaskInterceptor);

            var events = await nethContract.GetVideoPasswordEvents();

            foreach (var i in events)
            {
                await EmitEvent(i);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var keys = await http.GetFromJsonAsync<PublicPrivateKey>("/api/crypto/rsa-keys");

        dictionary.SetPPKey(keys);

        var neth = await dictionary.GetContract(metamaskInterceptor);

        neth.PublishPublicKeyAsync(keys.PublicKey);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notificationhub"))
            .Build();

        hubConnection.On<VideoMetaData>("OnBroadcastNewVideoInfo", (video) =>
        {
            videos.Add(video);
            this.StateHasChanged();
        });

        //Metamask
        MetamaskAvailable = await metamaskService.CheckMetamaskAvailability();

        if (MetamaskAvailable)
        {
            metamaskService.SelectedAccountChanged += a =>
            {
                Console.WriteLine("accountchanged");
                SelectedAccount = a;
                this.StateHasChanged();
                return Task.CompletedTask;
            };
        }

        await EnableEthereumAsync();

        await hubConnection.StartAsync();
    }

    protected async Task EnableEthereumAsync()
    {
        EthereumEnabled = await metamaskService.EnableEthereumAsync();
        if (EthereumEnabled)
        {
            SelectedAccount = await metamaskService.GetSelectedAccount();
        }
    }

    public async Task buyVideo(VideoMetaData video)
    {
        var nethContract = await dictionary.GetContract(metamaskInterceptor);

        await nethContract.BuyRequestAsync(dictionary.GetPublic(), video.IPFSHash);
    }
}

