@page "/videos"

@using Hackathon_VideoSharing_Platform.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using CommonLib
@using Hackathon.VideoSharing.Platform.Client 
@using IPFSConnection

@inject NavigationManager NavigationManager
@inject MetamaskService metamaskService;
@inject MetamaskInterceptor metamaskInterceptor;
@inject SymmetricKeyIPFSDictionary dictionary;
@inject HttpClient http; 

<h3>Available Videos</h3>
@if (IsSending)
{
    <p>Loading...</p>
}
else
{
    @foreach (var video in videos)
    {
        <div class="embed-responsive embed-responsive-21by9">
            <iframe class="embed-responsive-item" src="@dict[video.IPFSHash]"></iframe>
        </div>
        <div>Title: @video.Title</div>
        <div>Price: @video.Price</div>
        <button class="btn btn-primary" @onclick="@(() => buyVideo(video))">Buy</button>
    }
}



@code {
    private bool MetamaskAvailable { get; set; }
    private bool EthereumEnabled { get; set; }
    private string SelectedAccount { get; set; }

    private Task PasswordPolling { get; set; }

    private HubConnection hubConnection;
    private IPFSConnection IPFSConnection = new IPFSConnection();
    private string videoByteString;
    private bool IsSending;
    private List<VideoMetaData> videos = new List<VideoMetaData>
{
        new VideoMetaData() { Title = "First video", Price = 10, IPFSHash = "QmbTMj5bBMyHzFE7HTMBqnsuC58rv6q7Zai8BAiMtRqFT7" },
    };

    private async Task EmitEvent(VideoPasswordEventDTO dto)
    {

    }

    private async Task PollPasswords()
    {
        while (true)
        {
            await Task.Delay(100);

            var nethContract = await dictionary.GetContract(metamaskInterceptor, metamaskService);

            var events = await nethContract.GetVideoPasswordEvents();

            foreach (var i in events)
            {
                await EmitEvent(i);
            }
        }
    }

    private Dictionary<string, string> dict = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        IsSending = true;
        foreach (var item in videos)
        {
            var videoByteString = await VideoUrl(item.IPFSHash);
            dict.Add(item.IPFSHash, videoByteString);
        }

        IsSending = false;
        var keys = await http.GetFromJsonAsync<PublicPrivateKey>("/api/crypto/rsa-keys");

        dictionary.SetPPKey(keys);

        var neth = await dictionary.GetContract(metamaskInterceptor, metamaskService);

        await neth.PublishPublicKeyAsync(keys.PublicKey);

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/notificationhub"))
        .Build();

        hubConnection.On<VideoMetaData>("OnBroadcastNewVideoInfo", (video) =>
        {
            videos.Add(video);
            this.StateHasChanged();
        });

        //Metamask
        MetamaskAvailable = await metamaskService.CheckMetamaskAvailability();

        if (MetamaskAvailable)
        {
            metamaskService.SelectedAccountChanged += a =>
            {
                Console.WriteLine("accountchanged");
                SelectedAccount = a;
                this.StateHasChanged();
                return Task.CompletedTask;
            };
        }

        await EnableEthereumAsync();

        await hubConnection.StartAsync();
    }
    protected async Task<string> VideoUrl(string str)
    {
        string result = "data:video/mp4;base64,";
        var video = await IPFSConnection.GetVideoData64(str);
        string ipfsVideo = Convert.ToBase64String(video);
        return result + ipfsVideo;
    }

    protected async Task EnableEthereumAsync()
    {
        EthereumEnabled = await metamaskService.EnableEthereumAsync();
        if (EthereumEnabled)
        {
            SelectedAccount = await metamaskService.GetSelectedAccount();
        }
    }

    public async Task buyVideo(VideoMetaData video)
    {
        var nethContract = await dictionary.GetContract(metamaskInterceptor, metamaskService);

        await nethContract.BuyRequestAsync(dictionary.GetPublic(), video.IPFSHash);
    }
}

